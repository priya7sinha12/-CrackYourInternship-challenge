/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int l1=0,l2=0;
        ListNode *cur1=headA,*cur2=headB;
        while(cur1)
        {
            l1++;
            cur1=cur1->next;
        }
        while(cur2)
        {
            l2++;
            cur2=cur2->next;
        }
        cur1=headA;
        cur2=headB;
        int diff=abs(l1-l2);
        if(l1>l2)
        {
            while(diff-->0)
            {
                cur1=cur1->next;
            }
        }
        else
        {
            while(diff-->0)
            {
                cur2=cur2->next;
            }
        }
        while(cur1)
        {
            if(cur1==cur2)
            {
                break;
            }
            cur1=cur1->next;
            cur2=cur2->next;
        }
        return cur1;
    }
};
or\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *t1=headA,*t2=headB;
        while(t1!=t2)
        {
            t1=t1!=NULL?t1->next:headB;
            t2=t2!=NULL?t2->next:headA;
        }
        return t1;
    }
};
