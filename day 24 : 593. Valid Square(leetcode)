class Solution {
public:
    int distance(vector<int>& p1, vector<int>& p2)
    {
        return ((p1[0]-p2[0])*(p1[0]-p2[0]))+((p1[1]-p2[1])*(p1[1]-p2[1]));
    }
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(p1==p2||p1==p3||p1==p4||p2==p3||p2==p4||p3==p4)
        {
            return false;
        }
        vector<int> dist={distance(p1,p2),distance(p2,p3),distance(p3,p4),distance(p4,p1),distance(p2,p4),distance(p1,p3)};
        unordered_map <int,int> m;
        for(auto &i:dist)
        {
            if(!m.count(i))
            {
                m.insert({i,1});
            }
            else
            {
                m[i]++;
            }
        }
        if(m.size()!=2)
        {
            return false;
        }

        for(auto& p: m)
        {
            return (p.second==2)||(p.second==4);
        }
        return false;
    }
};
